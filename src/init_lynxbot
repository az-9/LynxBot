#!/bin/bash
# here are the command and function to be sourced to make a lynx bot.

pushd "${BASH_ARGV[0]%/*}" > /dev/null
export LynxBotBin="$PWD"
popd > /dev/null

export LB_Help_Version="${BASH_ARGV[0]##*/}/0.3 25May2013"
echo "$LB_Help_Version
Tip: all functions and their help messages are \"LB_\" prefixed, usefull for completion !-)
"

LB_Help_get_current_link="LB_startlynxbot
Connect to the first lynxbot.sh available.
echo: nothing
return 9 if fail, 0 if success."
function LB_startlynxbot {
	if ls -l /proc/$$/fd/8 2>/dev/null | grep lynx_cmd_input ; then
		echo "${0##*/}: warning: current process seems to already control a lynx (pid $LynxPid)" >&2
		return
	elif ls -l /proc/$$/fd/8 2>/dev/null ; then
		echo "${0##*/}: warning: fd 8 will be closed to control a lynx browser" >&2
	fi

	LynxPid=0
	# search for a lynx to bot
	for fifo in /tmp/lynx_cmd_input.* ; do 
		if [ -p "$fifo" -a -p "${fifo/cmd_input/output}" -a ! -f "/tmp/current_bot.${fifo##*.}" ] ; then
			export LynxBotPid=$$
			export LynxPid=${fifo#*.}
			echo -e "LynxBotPid=$LynxBotPid" > "/tmp/current_bot.$LynxPid" || return 1
			break;
		fi
	done
	if ! ((LynxPid)) ; then
		echo "${0##*/}: error: No lynx available to command" >&2
		return 9
	fi
	
	# stuff to avoid synchonisation problems
	echo -n "0 _NULL_" > /tmp/current_link.$LynxBotPid || return 1
	echo -n "0 _NULL_" > /tmp/current_linktype.$LynxBotPid || return 1

	# Start the lynx link and linktype extractor
	"$LynxBotBin"/extractlastlinkfromlynx /tmp/current_link.$LynxBotPid /tmp/current_linktype.$LynxBotPid /tmp/current_error.$LynxBotPid < "/tmp/lynx_output.$LynxPid" &
	
	# open the input fifo on fd 8
	exec 8<> "/tmp/lynx_cmd_input.$LynxPid"

	# Be sure that lynx is loaded
	LB_get_current_link > /dev/null
}
export -f LB_startlynxbot

LB_Help_get_current_link="LB_get_current_link
echo: the text of the current link
return 0"
function LB_get_current_link {
	nbla_=$((nbla+1));
	while ((nbla != nbla_)) ; do
		read nbla CurrentLink < /tmp/current_link.$LynxBotPid 
		"$LynxBotBin"/usleep 3000
		read nbla_ CurrentLink < /tmp/current_link.$LynxBotPid
	done
	echo "$CurrentLink"
}
export -f LB_get_current_link

LB_Help_get_current_linktype="LB_get_current_linktype
echo: the current link type (text)
return 0"
function LB_get_current_linktype {
	nbla_=$((nbla+1));
	while ((nbla != nbla_)) ; do
		read nbla CurrentLinkType < /tmp/current_linktype.$LynxBotPid 
		"$LynxBotBin"/usleep 3000
		read nbla_ CurrentLinkType < /tmp/current_linktype.$LynxBotPid
	done
	echo "$CurrentLinkType"
}
export -f LB_get_current_linktype

LB_Help_get_current_page="LB_get_current_page [filename]
Argument 1: file to store current (lynx) page (default : current_page)
echo: nothing
return 0"
function LB_get_current_page {
	CurrentPage="${1:-current_page}"
	[ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || return 3
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key p" >&8
	echo "key ^J" >&8
	echo "key ^U" >&8
	"$LynxBotBin"/setstrforlynx "$CurrentPage" >&8
	echo "key ^J" >&8
	# using fuser disallow an eventual race bug
	while ! [ -f "$CurrentPage" ] || /sbin/fuser "$CurrentPage" 2>/dev/null 1>&2 ; do
		"$LynxBotBin"/usleep 10000
	done
}
export -f LB_get_current_page

LB_Help_get_current_source="LB_get_current_source [filename]
Argument 1: file to store current source (default : current_source)
echo: nothing
return 0"
function LB_get_current_source {
	CurrentPage="${1:-current_source}"
	[ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || return 3
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key \\" >&8
	echo "key p" >&8
	echo "key ^J" >&8
	echo "key ^U" >&8
	"$LynxBotBin"/setstrforlynx "$CurrentPage" >&8
	echo "key ^J" >&8
	echo "key \\" >&8
	# using fuser disallow an eventual race bug
	while ! [ -f "$CurrentPage" ] || /sbin/fuser "$CurrentPage" >/dev/null 2>&1 ; do
		"$LynxBotBin"/usleep 10000
	done
}
export -f LB_get_current_source

LB_Help_go_nextl="LB_go_nextl [number]
Argument 1 = number of link to jump (default : 1)
echo: nothing
return 0"
function LB_go_nextl {
	for ((if=1;if<=${1:-1};if++)) ; do
		#echo "key Down Arrow" >&8 #key Up or Down may reach section with no link.
		echo "key <tab>" >&8
	done
#	LB_get_current_link
}
export -f LB_go_nextl

LB_Help_go_previousl="LB_go_previousl [number]
Argument 1 = number of link to jump (default : 1)
echo: nothing
return 0"
function LB_go_previousl {
	for ((if=1;if<=${1:-1};if++)) ; do
		#echo "key Up Arrow" >&8 #key Up or Down may reach section with no link.
		echo "key Back Tab" >&8
	done
#	LB_get_current_link
}
export -f LB_go_previousl

LB_Help_go_previouspage="LB_go_previouspage [number]
Argument 1: which previous page to reach (default : 1)
echo: nothing
return 0"
function LB_go_previouspage {
	for ((if=1;if<=${1:-1};if++)) ; do
		echo "key Left Arrow" >&8
	done
}
export -f LB_go_previouspage

LB_Help_secure_go_link="LB_secure_go_link
echo: nothing
return 9 if unsure link has been reached, 0 if success."
function LB_secure_go_link {
	[ ! -f "/tmp/current_error.$LynxBotPid" ] || rm -f "/tmp/current_error.$LynxBotPid" || return 3
	echo "key Right Arrow" >&8
	LB_get_current_page "/tmp/current_page.$LynxBotPid"
	"$LynxBotBin"/usleep 50000
	[ -f "/tmp/current_error.$LynxBotPid" ] && return 9
}
export -f LB_secure_go_link

LB_Help_go_link="LB_go_link
echo: nothing
return 0"
function LB_go_link {
	echo "key Right Arrow" >&8
}
export -f LB_go_link

LB_Help_go_firstl="LB_go_firstl
Jump to the first link of the page.
echo: nothing
return 0"
function LB_go_firstl {
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key Home" >&8
}
export -f LB_go_firstl

LB_Help_go_lastl="LB_go_lastl
Jump to the last link of the page.
echo: nothing
return 0"
function LB_go_lastl {
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key End" >&8
}
export -f LB_go_lastl

LB_Help_secure_go_to_url="LB_secure_go_to_url URL
Argument 1: which url to get (mandatory)
echo: nothing
return 9 if no given url or unsure that url has been reached, 0 if success."
function LB_secure_go_to_url {
	[ "$1" ] || return 9

	[ ! -f "/tmp/current_error.$LynxBotPid" ] || rm -f "/tmp/current_error.$LynxBotPid" || return 3
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key g" >&8
	"$LynxBotBin"/setstrforlynx "$1" >&8
	echo "key ^J" >&8
	LB_get_current_page "/tmp/current_page.$LynxBotPid"
	"$LynxBotBin"/usleep 50000
	[ -f "/tmp/current_error.$LynxBotPid" ] && return 9
}
export -f LB_secure_go_to_url


LB_Help_go_to_url="LB_go_to_url URL
Argument 1: which url to get (mandatory)
echo: nothing
return 9 if no given url, else 0."
function LB_go_to_url {
	[ "$1" ] || return 9

	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key g" >&8
	"$LynxBotBin"/setstrforlynx "$1" >&8
	echo "key ^J" >&8
}
export -f LB_go_to_url

LB_Help_refresh_page="LB_refresh_page
echo: nothing
return 0."
function LB_refresh_page {
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key ^R" >&8
}
export -f LB_refresh_page

LB_Help_get_current_info="LB_get_current_info [filename]
Argument 1: file to store info on current page and link (default: current_info)
echo: nothing
return 0"
function LB_get_current_info {
	CurrentPage="${1:-current_info}"
	[ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || return 3
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi

	echo "key =" >&8

	echo "key p" >&8
	echo "key ^J" >&8
	echo "key ^U" >&8
	"$LynxBotBin"/setstrforlynx "$CurrentPage" >&8
	echo "key ^J" >&8

	echo "key =" >&8

	# using fuser disallow an eventual race bug
	while ! [ -f "$CurrentPage" ] || /sbin/fuser "$CurrentPage" 2>/dev/null 1>&2 ; do
		"$LynxBotBin"/usleep 10000
	done
}
export -f LB_get_current_info

LB_Help_search_link="LB_search_link [max_number] PATTERN 
Argument 1: max number of links to parse before exiting, if the number is negative search is done backwards. (default: 64)
Argument 2...: passed to grep to search link (mandatory)
echo: the number of parsed links, followed by the founded link (grep output).
return 0 if the link is found, 9 if not."
function LB_search_link {
	local isearch=0 maxn="$1" gonext output
	((maxn)) 2>/dev/null && shift || maxn=64

	[ "$1" ] || return 9
	if ((maxn<0)) ; then
		((maxn=-maxn))
		gonext=LB_go_previousl
	else
		gonext=LB_go_nextl
	fi

	while ((isearch++<maxn)) ; do
		if output="$(echo "$(LB_get_current_link)" | grep "$@")" ; then
			echo "$((isearch-1)) $output"
			return 0
		else
			$gonext
		fi
	done
	return 9
}
export -f LB_search_link

LB_Help_search_linktype="LB_search_linktype [max_number] PATTERN 
Argument 1: max number of links to parse before exiting, if the number is negative search is done backwards. (default: 64)
Argument 2...: passed to grep to search link type (mandatory)
echo: the number of parsed links, followed by the founded link type (grep output).
return 0 if the linktype is found, 9 if not.

Note: Types use to be: 'Unknow', 'NORMAL LINK', 'Text entry field', 'Password entry field', 'Form submit button', 'Radio Button', 'Checkbox Field', 'Option list', 'Choice list' and Textarea."
# type can be
# 0 Unknow
# 1 NORMAL LINK
# 2 Text entry field
# 3 Password entry field
# 4 Form submit button
# 5 Radio Button
# 6 Checkbox Field
# 7 Option list
# 8 Choice list
# 9 Textarea
function LB_search_linktype {
	local isearch=0 maxn="$1" gonext output
	((maxn)) 2>/dev/null && shift || maxn=64

	[ "$1" ] || return 9
	if ((maxn<0)) ; then
		((maxn=-maxn))
		gonext=LB_go_previousl
	else
		gonext=LB_go_nextl
	fi

	while ((isearch++<maxn)) ; do
		if output="$(echo "$(LB_get_current_linktype)" | grep "$@")" ; then
			echo "$((isearch-1)) $output"
			return 0
		else
			$gonext
		fi
	done
	return 9
}
export -f LB_search_linktype

LB_Help_write_string="LB_write_string STRING
Argument 1: String to write in a Text entry field.
echo: nothing
return 9 if current type is not ' entry field' or 'Textarea', 0 if OK."
function LB_write_string {
	LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null || return 9
	"$LynxBotBin"/setstrforlynx "$1" >&8
}
export -f LB_write_string

LB_Help_stop="LB_stop
Close the connected lynx and lynxbot.sh session.
echo: nothing
return 0."
function LB_stop {
	if LB_get_current_linktype | grep -i "\(textarea\|entry field\)" > /dev/null ; then
		echo "key ^V" >&8
	fi
	echo "key ^D" >&8
	rm -f "/tmp/current_link.$LynxBotPid" 
	rm -f "/tmp/current_linktype.$LynxBotPid"
	rm -f "/tmp/current_error.$LynxBotPid" 2> /dev/null
	rm -f "/tmp/current_page.$LynxBotPid" 2> /dev/null
	rm -f "/tmp/current_bot.$LynxPid"
	wait
	exec 8>&-
}
export -f LB_stop
