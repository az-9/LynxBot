#!/bin/bash
# here are the command and function to be sourced to make a lynx bot.

LynxBotBin="${BASH_ARGV[0]%/*}"

LB_Help_Version="${BASH_ARGV[0]##*/}/0.2 13May2013"
echo "$LB_Help_Version
Tip: all functions and their help messages are \"LB_\" prefixed, usefull for completion !-)"

LB_Help_get_current_link="LB_startlynxbot
Connect to the first lynxbot.sh available.
echo: nothing
return 9 if fail, 0 if success."
function LB_startlynxbot {
    LynxPid=0
    # search for a lynx to bot
    for fifo in /tmp/lynx_cmd_input.* ; do 
        if [ -p "$fifo" -a -p "${fifo/cmd_input/output}" -a ! -f "/tmp/current_bot.${fifo##*.}" ] ; then
            echo $$ > /tmp/current_bot.${fifo#*.}
            LynxPid=${fifo#*.}
            break;
        fi
    done
    if ! ((LynxPid)) ; then
        echo "${0##*/}: error: No lynx available to command" >&2
        return 9
    fi
    
    # stuff to avoid synchonisation problems
    echo -n "0 _NULL_" > /tmp/current_link.$$ || exit -1
    echo -n "0 _NULL_" > /tmp/current_linktype.$$ || exit -1
    nbla_=1

    # Start the lynx link and linktype extractor
    "$LynxBotBin"/extractlastlinkfromlynx /tmp/current_link.$$ /tmp/current_linktype.$$ /tmp/current_error.$$ < "/tmp/lynx_output.$LynxPid" &
    
    # open the input fifo on fd 3
    exec 3<> "/tmp/lynx_cmd_input.$LynxPid"

    # Be sure that lynx is loaded
    LB_get_current_link > /dev/null
}

LB_Help_get_current_link="LB_get_current_link
echo: the text of the current link
return 0"
function LB_get_current_link {
    read nbla CurrentLink < /tmp/current_link.$$ 
    while ((nbla != nbla_)) ; do
    	read nbla CurrentLink < /tmp/current_link.$$ 
        "$LynxBotBin"/usleep 3000
        read nbla_ CurrentLink < /tmp/current_link.$$
    done
    echo "$CurrentLink"
}

LB_Help_get_current_linktype="LB_get_current_linktype
echo: the current link type (text)
return 0"
function LB_get_current_linktype {
    read nbla CurrentLinkType < /tmp/current_linktype.$$ 
    while ((nbla != nbla_)) ; do
    	read nbla CurrentLinkType < /tmp/current_linktype.$$ 
        "$LynxBotBin"/usleep 3000
        read nbla_ CurrentLinkType < /tmp/current_linktype.$$
    done
    echo "$CurrentLinkType"
}

LB_Help_get_current_page="LB_get_current_page [filename]
Argument 1: file to store current (lynx) page (default : current_page)
echo: nothing
return 0"
function LB_get_current_page {
    CurrentPage="${1:-current_page}"
    [ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || exit -3
    "$LynxBotBin"/usleep 1000
    echo "key p" >&3
    echo "key ^J" >&3
    echo "key ^U" >&3
    "$LynxBotBin"/setstrforlynx "$CurrentPage" >&3
    echo "key ^J" >&3
    # using fuser is better
    while ! [ -f "$CurrentPage" ] ; do
        "$LynxBotBin"/usleep 10000
    done
}

LB_Help_get_current_source="LB_get_current_source [filename]
Argument 1: file to store current source (default : current_source)
echo: nothing
return 0"
function LB_get_current_source {
    CurrentPage="${1:-current_source}"
    [ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || exit -3
    echo "key \\" >&3
    echo "key p" >&3
    echo "key ^J" >&3
    echo "key ^U" >&3
    "$LynxBotBin"/setstrforlynx "$CurrentPage" >&3
    echo "key ^J" >&3
    echo "key \\" >&3
    while ! [ -f "$CurrentPage" ] ; do
        "$LynxBotBin"/usleep 10000
    done
}

LB_Help_go_nextl="LB_go_nextl [number]
Argument 1 = number of link to jump (default : 1)
echo: nothing
return 0"
function LB_go_nextl {
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Down Arrow" >&3
    done
#    LB_get_current_link
}

LB_Help_go_previousl="LB_go_previousl [number]
Argument 1 = number of link to jump (default : 1)
echo: nothing
return 0"
function LB_go_previousl {
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Up Arrow" >&3
    done
#    LB_get_current_link
}

LB_Help_go_previouspage="LB_go_previouspage [number]
Argument 1: which previous page to reach (default : 1)
echo: nothing
return 0"
function LB_go_previouspage {
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Left Arrow" >&3
    done
}

LB_Help_secure_go_link="LB_secure_go_link
echo: nothing
return 9 if unsure link has been reached, 0 if success."
function LB_secure_go_link {
    [ ! -f "/tmp/current_error.$$" ] || rm -f "/tmp/current_error.$$" || exit -3
    echo "key Right Arrow" >&3
    LB_get_current_page "/tmp/current_page.$$"
    "$LynxBotBin"/usleep 5000
    if [ -f "/tmp/current_error.$$" ] ; then return 9 ; fi
}

LB_Help_go_link="LB_go_link
echo: nothing
return 0"
function LB_go_link {
    echo "key Right Arrow" >&3
}

LB_Help_go_firstl="LB_go_firstl
Jump to the first link of the page.
echo: nothing
return 0"
function LB_go_firstl {
    echo "key Home" >&3
}

LB_Help_go_lastl="LB_go_lastl
Jump to the last link of the page.
echo: nothing
return 0"
function LB_go_lastl {
    echo "key End" >&3
}

LB_Help_secure_go_to_url="LB_secure_go_to_url URL
Argument 1: which url to get (mandatory)
echo: nothing
return 9 if no given url or unsure that url has been reached, 0 if success."
function LB_secure_go_to_url {
    if [ "$1" ] ; then
		[ ! -f "/tmp/current_error.$$" ] || rm -f "/tmp/current_error.$$" || exit -3
		echo "key g" >&3
    	"$LynxBotBin"/setstrforlynx "$1" >&3
    	echo "key ^J" >&3
        LB_get_current_page "/tmp/current_page.$$"
        "$LynxBotBin"/usleep 5000
        if [ -f "/tmp/current_error.$$" ] ; then return 9 ; fi
    else
        return 9
    fi
}

LB_Help_go_to_url="LB_go_to_url URL
Argument 1: which url to get (mandatory)
echo: nothing
return 9 if no given url, else 0."
function LB_go_to_url {
    if [ "$1" ] ; then
		echo "key g" >&3
    	"$LynxBotBin"/setstrforlynx "$1" >&3
    	echo "key ^J" >&3
	else
		return 9
    fi
}

LB_Help_refresh_page="LB_refresh_page
echo: nothing
return 0."
function LB_refresh_page {
# no Argument
    echo "key ^R" >&3
}

LB_Help_get_current_info="LB_get_current_info [filename]
Argument 1: file to store info on current page and link (default: current_info)
echo: nothing
return 0"
function LB_get_current_info {
    echo "key =" >&3
    LB_get_current_page "${1:-current_info}"
    echo "key =" >&3
}

LB_Help_search_link="LB_search_link PATTERN [max_number]
Argument 1: which link to search (mandatory)
Argument 2: max number of links to parse before exiting (default: 64)
echo: nothing
return 0 if the link is found, 9 if not."
function LB_search_link {
    if ! [ "$1" ] ; then return 9 ; fi
    isearch=0
    while ((isearch++<${2:-64})) ; do
	if echo "$(LB_get_current_link)" | grep "$1" ; then
	    return 0
        else
            LB_go_nextl
        fi
    done
    return 9
}

LB_Help_search_linktype="LB_search_linktype PATTERN [max_number]
Argument 1: which linktype to search (mandatory)
Argument 2: max number of links to parse before exiting (default: 64)
echo: nothing
return 0 if the linktype is found, 9 if not.

Note: Types use to be: 'Unknow', 'NORMAL LINK', 'Text entry field', 'Password entry field', 'Form submit button', 'Radio Button', 'Checkbox Field', 'Option list', and 'Choice list'."
# type can be
# 0 Unknow
# 1 NORMAL LINK
# 2 Text entry field
# 3 Password entry field
# 4 Form submit button
# 5 Radio Button
# 6 Checkbox Field
# 7 Option list
# 8 Choice list
function LB_search_linktype {
    if ! [ "$1" ] ; then return 9 ; fi
    isearch=0
    while ((isearch++<${2:-64})) ; do
	if echo "$(LB_get_current_linktype)" | grep "$1" > /dev/null ; then
	    return 0
	else
	    LB_go_nextl
	fi
    done
    return 9
}

LB_Help_write_string="LB_write_string STRING
Argument 1: String to write in a Text entry field.
echo: nothing
return 9 if current type is not 'Text entry field', 0 if OK."
function LB_write_string {
    if ! echo "$(LB_get_current_linktype)" | grep " entry field$" > /dev/null ; then return 9 ; fi
    "$LynxBotBin"/setstrforlynx "$1" >&3
}

LB_Help_stop="LB_stop
Close the connected lynx and lynxbot.sh session.
echo: nothing
return 0."
function LB_stop {
    echo "key ^D" >&3
    rm -f "/tmp/current_link.$$" 
    rm -f "/tmp/current_linktype.$$"
    rm -f "/tmp/current_error.$$" 2> /dev/null
    rm -f "/tmp/current_page.$$" 2> /dev/null
    rm -f "/tmp/current_bot.$LynxPid"
    wait
    exec 3>&-
}

