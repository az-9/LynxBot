# here are the command and function to be sourced to make a lynx bot.

LynxBotBin="/usr/local/lib/lynxbot"

function LB_startlynxbot {
# no Argument
    LynxPid=0
    # search for a lynx to bot
    for fifo in /tmp/lynx_cmd_input.* ; do 
        if [ -p "$fifo" -a -p "${fifo/cmd_input/output}" -a ! -f "/tmp/current_bot.${fifo##*.}" ] ; then
            echo $$ > /tmp/current_bot.${fifo#*.}
            LynxPid=${fifo#*.}
            break;
        fi
    done
    if ! ((LynxPid)) ; then
        echo "${0##*/}: error: No lynx available to command" >&2
        return -1
    fi
    
    # stuff to avoid synchonisation problems
    echo -n "0 _NULL_" > /tmp/current_link.$$ || exit -1
    echo -n "0 _NULL_" > /tmp/current_linktype.$$ || exit -1
    nbla_=1

    # Start the lynx link and linktype extractor
    "$LynxBotBin"/extractlastlinkfromlynx /tmp/current_link.$$ /tmp/current_linktype.$$ /tmp/current_error.$$ < "/tmp/lynx_output.$LynxPid" &
    
    # open the input fifo on fd 3
    exec 3<> "/tmp/lynx_cmd_input.$LynxPid"

    # Be sure that lynx is loaded
    LB_get_current_link > /dev/null
}

function LB_get_current_link {
# return the text of the current link
    read nbla CurrentLink < /tmp/current_link.$$ 
    while ((nbla != nbla_)) ; do
    	read nbla CurrentLink < /tmp/current_link.$$ 
        "$LynxBotBin"/usleep 3000
        read nbla_ CurrentLink < /tmp/current_link.$$
    done
    echo "$CurrentLink"
}

function LB_get_current_linktype {
# return the current link type
    read nbla CurrentLinkType < /tmp/current_linktype.$$ 
    while ((nbla != nbla_)) ; do
    	read nbla CurrentLinkType < /tmp/current_linktype.$$ 
        "$LynxBotBin"/usleep 3000
        read nbla_ CurrentLinkType < /tmp/current_linktype.$$
    done
    echo "$CurrentLinkType"
}

function LB_get_current_page {
# Argument 1 = file to store current page (default : current_page)
    CurrentPage="${1:-current_page}"
    [ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || exit -3
    "$LynxBotBin"/usleep 1000
    echo "key p" >&3
    echo "key ^J" >&3
    echo "key ^U" >&3
    "$LynxBotBin"/setstrforlynx "$CurrentPage" >&3
    echo "key ^J" >&3
    # using fuser is better
    while ! [ -f "$CurrentPage" ] ; do
        "$LynxBotBin"/usleep 10000
    done
}

function LB_get_current_source {
# Argument 1 = file to store current source (default : current_source)
    CurrentPage="${1:-current_source}"
    [ ! -f "$CurrentPage" ] || rm -f "$CurrentPage" || exit -3
    echo "key \\" >&3
    echo "key p" >&3
    echo "key ^J" >&3
    echo "key ^U" >&3
    "$LynxBotBin"/setstrforlynx "$CurrentPage" >&3
    echo "key ^J" >&3
    echo "key \\" >&3
    while ! [ -f "$CurrentPage" ] ; do
        "$LynxBotBin"/usleep 10000
    done
}

function LB_go_nextl {
# Argument 1 = number of link to jump (default : 1)
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Down Arrow" >&3
    done
#    LB_get_current_link
}

function LB_go_previousl {
# Argument 1 = number of link to jump (default : 1)
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Up Arrow" >&3
    done
#    LB_get_current_link
}

function LB_go_previouspage {
# Argument 1 = which previous page to reach (default : 1)
    for ((if=1;if<=${1:-1};if++)) ; do
	echo "key Left Arrow" >&3
    done
}

function LB_secure_go_link {
# no Argument
    [ ! -f "/tmp/current_error.$$" ] || rm -f "/tmp/current_error.$$" || exit -3
    echo "key Right Arrow" >&3
    LB_get_current_page "/tmp/current_page.$$"
    "$LynxBotBin"/usleep 5000
    if [ -f "/tmp/current_error.$$" ] ; then return -1 ; fi
}

function LB_go_link {
# no Argument
    echo "key Right Arrow" >&3
}

function LB_go_firstl {
# no Argument
    echo "key Home" >&3
}

function LB_go_lastl {
# no Argument
    echo "key End" >&3
}

function LB_secure_go_to_url {
# Argument 1 = which url to get (mandatory)
    if [ "$1" ] ; then
        [ ! -f "/tmp/current_error.$$" ] || rm -f "/tmp/current_error.$$" || exit -3
	echo "key g" >&3
    	"$LynxBotBin"/setstrforlynx "$1" >&3
    	echo "key ^J" >&3
        LB_get_current_page "/tmp/current_page.$$"
        "$LynxBotBin"/usleep 5000
        if [ -f "/tmp/current_error.$$" ] ; then return -1 ; fi
    else
        return -1
    fi
}

function LB_go_to_url {
# Argument 1 = which url to get (mandatory)
    if [ "$1" ] ; then
	echo "key g" >&3
    	"$LynxBotBin"/setstrforlynx "$1" >&3
    	echo "key ^J" >&3
    fi
}

function LB_refresh_page {
# no Argument
    echo "key ^R" >&3
}

function LB_get_current_info {
# Argument 1 = file to store info on current page and link (default : current_info)
    echo "key =" >&3
    LB_get_current_page "${1:-current_info}"
    echo "key =" >&3
}

function LB_search_link {
# Argument 1 = which link to search (mandatory)
# Argument 2 = max number of links to parse before exiting (default: 64)
# return 0 if the link is found, -1 if not.
    if ! [ "$1" ] ; then return -1 ; fi
    isearch=0
    while ((isearch++<${2:-64})) ; do
	if echo "$(LB_get_current_link)" | grep "$1" ; then
	    return 0
        else
            LB_go_nextl
        fi
    done
    return -1
}

# type can be
# 0 Unknow
# 1 NORMAL LINK
# 2 Text entry field
# 3 Password entry field
# 4 Form submit button
# 5 Radio Button
# 6 Checkbox Field
# 7 Option list
# 8 Choice list
function LB_search_linktype {
# Argument 1 = which linktype to search (mandatory)
# Argument 2 = max number of links to parse before exiting (default: 64)
# return 0 if the linktype is found, -1 if not.
    if ! [ "$1" ] ; then return -1 ; fi
    isearch=0
    while ((isearch++<${2:-64})) ; do
	if echo "$(LB_get_current_linktype)" | grep "$1" > /dev/null ; then
	    return 0
	else
	    LB_go_nextl
	fi
    done
    return -1
}

function LB_write_string {
# Argument 1 = String to write in a Text entry field.
# return -1 current type is not "Text entry field", 0 if OK.
    if ! echo "$(LB_get_current_linktype)" | grep " entry field$" > /dev/null ; then return -1 ; fi
    "$LynxBotBin"/setstrforlynx "$1" >&3
}

function LB_stop {
# no Argument
    echo "key ^D" >&3
    rm -f "/tmp/current_link.$$" 
    rm -f "/tmp/current_linktype.$$"
    rm -f "/tmp/current_error.$$" 2> /dev/null
    rm -f "/tmp/current_page.$$" 2> /dev/null
    rm -f "/tmp/current_bot.$LynxPid"
    wait
    exec 3>&-
}

